use alohomora::bbox::BBox as PCon;
use alohomora::pure::PrivacyPureRegion;
use alohomora::tarpc::client::{TahiniChannel, TahiniNewClient, TahiniRequestDispatch, TahiniStub};
use alohomora::tarpc::enums::{DeboxedTahiniEnum, TahiniEnum};
use alohomora::tarpc::server::TahiniServe;
use alohomora::tarpc::traits::{NamedTahiniType, TahiniType};
use serde::{Deserialize, Serialize};
use tarpc::{ClientMessage, Response, Transport};
use tarpc::client::{Config, RpcError};

use crate::policy::ExamplePolicy;

// START: this part is what the developer writes.
// #[TahiniService]
pub trait SimpleService2: Sized + Clone {
    async fn increment(
        self,
        ctxt: tarpc::context::Context,
        x: PCon<i32, ExamplePolicy>,
    ) -> PCon<String, ExamplePolicy>;

    // Autogenerated by macro
    fn serve(self) -> SimpleService2Serve<Self> {
        SimpleService2Serve(self)
    }
}

#[derive(Clone)]
pub struct SimpleService2Server;
impl SimpleService2 for SimpleService2Server {
    async fn increment(self, _context: tarpc::context::Context, x: PCon<i32, ExamplePolicy>) -> PCon<String, ExamplePolicy> {
        println!("Within the application level, we are operating on PCons.");
        x.into_ppr(PrivacyPureRegion::new(|val| format!("{}", val + 1)))
    }
}
// END: the part that developers write is over.

// #[derive(TahiniType)]
pub enum SimpleService2Request {
    Increment(PCon<i32, ExamplePolicy>),
}
#[derive(Serialize, Deserialize)]
pub enum SimpleService2RequestIntermediate {
    Increment(<PCon<i32, ExamplePolicy> as TahiniType>::Intermediate),
}
impl TahiniType for SimpleService2Request {
    type Intermediate = SimpleService2RequestIntermediate;
    fn to_enum(self) -> TahiniEnum {
        match self {
            SimpleService2Request::Increment(v) =>
                TahiniEnum::Enum(0, Box::new(v.to_enum()))
        }
    }
    fn to_intermediate(e: DeboxedTahiniEnum) -> Self::Intermediate {
        if let DeboxedTahiniEnum::Enum(id, v) = e {
            match id {
                0 => Self::Intermediate::Increment(PCon::to_intermediate(*v)),
                _ => panic!(""),
            }
        } else {
            panic!("");
        }
    }
    fn from_intermediate(e: Self::Intermediate) -> DeboxedTahiniEnum {
        match e {
            Self::Intermediate::Increment(e) =>
                DeboxedTahiniEnum::Enum(0, Box::new(PCon::from_intermediate(e))),
        }
    }
    fn from_enum(e: TahiniEnum) -> Self {
        if let TahiniEnum::Enum(id, v) = e {
            match id {
                0 => SimpleService2Request::Increment(PCon::from_enum(*v)),
                _ => panic!(""),
            }
        } else {
            panic!("");
        }
    }
}

// #[derive(TahiniType)]
pub enum SimpleService2Response {
    Increment(PCon<String, ExamplePolicy>),
}
#[derive(Serialize, Deserialize)]
pub enum SimpleService2ResponseIntermediate {
    Increment(<PCon<String, ExamplePolicy> as TahiniType>::Intermediate),
}
impl TahiniType for SimpleService2Response {
    type Intermediate = SimpleService2ResponseIntermediate;
    fn to_enum(self) -> TahiniEnum {
        match self {
            SimpleService2Response::Increment(v) =>
                TahiniEnum::Enum(0, Box::new(v.to_enum()))
        }
    }
    fn to_intermediate(e: DeboxedTahiniEnum) -> Self::Intermediate {
        if let DeboxedTahiniEnum::Enum(id, v) = e {
            match id {
                0 => Self::Intermediate::Increment(PCon::to_intermediate(*v)),
                _ => panic!(""),
            }
        } else {
            panic!("");
        }
    }
    fn from_intermediate(e: Self::Intermediate) -> DeboxedTahiniEnum {
        match e {
            Self::Intermediate::Increment(e) =>
                DeboxedTahiniEnum::Enum(0, Box::new(PCon::from_intermediate(e))),
        }
    }
    fn from_enum(e: TahiniEnum) -> Self {
        if let TahiniEnum::Enum(id, v) = e {
            match id {
                0 => SimpleService2Response::Increment(PCon::from_enum(*v)),
                _ => panic!(""),
            }
        } else {
            panic!("");
        }
    }
}
impl NamedTahiniType for SimpleService2Request {
    fn enum_name(v: &Self::Intermediate) -> &'static str {
        match v {
            Self::Intermediate::Increment(_) => "SimpleService2.increment",
        }
    }
}

// Server-side generated code.
#[derive(Clone, Copy)]
pub struct SimpleService2Serve<S: SimpleService2 + Clone>(pub S);

impl<S: SimpleService2 + Clone> TahiniServe for SimpleService2Serve<S> {
    type Req = SimpleService2Request;
    type Resp = SimpleService2Response;

    async fn serve(
        self,
        ctx: tarpc::context::Context,
        req: Self::Req,
    ) -> Result<Self::Resp, tarpc::ServerError> {
        match req {
            SimpleService2Request::Increment(v) => {
                let resp = self.0.increment(ctx, v).await;
                Ok(SimpleService2Response::Increment(resp))
            }
        }
    }
}


// Client-side generated code.
pub struct SimpleService2Client(TahiniChannel<SimpleService2Request, SimpleService2Response>);
impl SimpleService2Client {
    pub fn new<T>(config: Config, transport: T) -> TahiniNewClient<Self, TahiniRequestDispatch<SimpleService2Request, SimpleService2Response, T>>
    where
        T: Transport<ClientMessage<SimpleService2RequestIntermediate>, Response<SimpleService2ResponseIntermediate>>,
    {
        let new_client = alohomora::tarpc::client::new(config, transport);
        TahiniNewClient {
            client: SimpleService2Client(new_client.client),
            dispatch: new_client.dispatch
        }
    }
}

impl SimpleService2Client {
    pub async fn increment(&self, ctx: ::tarpc::context::Context, x: PCon<i32, ExamplePolicy>) -> Result<PCon<String, ExamplePolicy>, RpcError> {
        let request = SimpleService2Request::Increment(x);
        match self.0.call(ctx, "SimpleService2.increment", request).await? {
            SimpleService2Response::Increment(msg) => Ok(msg),
        }
    }
}